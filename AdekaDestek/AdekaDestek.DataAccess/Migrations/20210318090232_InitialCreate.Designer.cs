// <auto-generated />
using System;
using AdekaDestek.DataAccess.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdekaDestek.DataAccess.Migrations
{
    [DbContext(typeof(AdekaDestekContext))]
    [Migration("20210318090232_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AdekaDestek.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "45818398-ecc1-42e3-ae7b-61a59e80ab7e",
                            Name = "Payroll.Create",
                            NormalizedName = "PAYROLL.CREATE"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "f72f133c-dfc6-4886-8dbc-f2bf04313d2c",
                            Name = "Payroll.Read",
                            NormalizedName = "PAYROLL.READ"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "47d60c49-7603-4229-b681-1670beffcd2b",
                            Name = "Payroll.Update",
                            NormalizedName = "PAYROLL.UPDATE"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "4c330874-3d97-4c37-ac80-3c05c675fe48",
                            Name = "Payroll.Delete",
                            NormalizedName = "PAYROLL.DELETE"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "ee83b42e-d823-4385-a340-0369fd3b722d",
                            Name = "AnnualPermit.Create",
                            NormalizedName = "ANNUALPERMIT.CREATE"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = "6a410476-3795-4e07-a91f-b8a07893ef6e",
                            Name = "AnnualPermit.Read",
                            NormalizedName = "ANNUALPERMIT.READ"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = "1b8eeb13-2cc9-419b-94ca-7adb518ce4f7",
                            Name = "AnnualPermit.Update",
                            NormalizedName = "ANNUALPERMIT.UPDATE"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = "17cd0d10-ed3f-4751-90ee-02345b3d75c2",
                            Name = "AnnualPermit.Delete",
                            NormalizedName = "ANNUALPERMIT.DELETE"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = "62a38983-126e-434a-9eb2-5f94457b70d0",
                            Name = "User.Create",
                            NormalizedName = "USER.CREATE"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = "139e63a1-71f1-415f-a3d1-77cb85cff090",
                            Name = "User.Read",
                            NormalizedName = "USER.READ"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = "cb6d909b-8749-489a-90a0-d06b5d255220",
                            Name = "User.Update",
                            NormalizedName = "USER.UPDATE"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = "229a658f-34e3-4529-8b65-f93a85ba27aa",
                            Name = "User.Delete",
                            NormalizedName = "USER.DELETE"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = "7ca52267-8136-48a5-84e4-9c8101386571",
                            Name = "Role.Create",
                            NormalizedName = "ROLE.CREATE"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = "918832ba-9744-4251-9972-01639bc96745",
                            Name = "Role.Read",
                            NormalizedName = "ROLE.READ"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyStamp = "3478ecfa-89b1-4aed-845d-64cad81cdb21",
                            Name = "Role.Update",
                            NormalizedName = "ROLE.UPDATE"
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyStamp = "8e1f07cb-432e-4349-889c-68a965f2b025",
                            Name = "Role.Delete",
                            NormalizedName = "ROLE.DELETE"
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyStamp = "64e0774f-e0d8-45bd-a8ea-9ce41a0fb84a",
                            Name = "AdminArea.Home.Read",
                            NormalizedName = "ADMINAREA.HOME.READ"
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyStamp = "3424e2e2-2b8c-4dc6-ae43-80798a030a15",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyStamp = "75dc651b-eaf9-432e-b203-c6afd73f18b0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyStamp = "843402e7-d27d-4443-a89e-fd1c33d59672",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyStamp = "691e22f7-e521-43b5-a059-4a1600bb8bfd",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("AdekaDestek.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("AdekaDestek.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(30)
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("InfiniUserName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasMaxLength(1)
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedByName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasMaxLength(30)
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SapEmployeeNo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SapUserName")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<short?>("TwoFactorType")
                        .HasMaxLength(1)
                        .HasColumnType("smallint");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f23d5e5-b2c9-4bc8-b033-b234e68ce6f8",
                            CreatedByName = "Emre Can Ayar",
                            CreatedDate = new DateTime(2021, 3, 18, 12, 2, 31, 974, DateTimeKind.Local).AddTicks(3383),
                            Email = "adminuser@adeka.com.tr",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            InfiniUserName = "admin.user",
                            IsActive = true,
                            LastName = "User",
                            LockoutEnabled = false,
                            ModifiedByName = "Emre Can Ayar",
                            ModifiedDate = new DateTime(2021, 3, 18, 12, 2, 31, 975, DateTimeKind.Local).AddTicks(7204),
                            NormalizedEmail = "ADMINUSER@ADEKA.COM.TR",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEEoOW8HxUS4WXwL8+9nwDdSr4bEEheSzQwq/6mKOMFQuwp+ebMYNm9fgZZLfC8KLUw==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            SapEmployeeNo = "999",
                            SapUserName = "admin.user",
                            SecurityStamp = "c97dd2ac-3565-4959-b689-098d52cad940",
                            TwoFactorEnabled = false,
                            TwoFactorType = (short)0,
                            UserName = "adminuser"
                        });
                });

            modelBuilder.Entity("AdekaDestek.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("AdekaDestek.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("AdekaDestek.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("AdekaDestek.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("AdekaDestek.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("AdekaDestek.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdekaDestek.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("AdekaDestek.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdekaDestek.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("AdekaDestek.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdekaDestek.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("AdekaDestek.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdekaDestek.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdekaDestek.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("AdekaDestek.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
